//== Grid system
//== Generate semantic grid columns with these mixins.
//== ===================================================================== ==//

@mixin make-container($gutters: $grid-gutter-widths) {
  @include make-gutters($gutters);
  width: 100%;
  margin-left: auto;
  margin-right: auto;

  @if ($grid-add-box-sizing) {
    box-sizing: border-box;
  }
}

//== For each breakpoint, define the maximum width of the container in a media query
//== ===================================================================== ==//

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      //noinspection CssInvalidFunction
      max-width: if(grid-use-rem(), convert-length($container-max-width, rem), $container-max-width);
    }
  }
}

@mixin make-row($gutters: $grid-gutter-widths) {
  @include make-margins($gutters);
  display: flex;
  flex-wrap: wrap;
}

@mixin make-col-ready($gutters: $grid-gutter-widths) {
  @include make-gutters($gutters);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  //flex: 0 0 100%;
  //max-width: 100%;

  @if ($grid-add-box-sizing) {
    box-sizing: border-box;
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

//== Row columns
//==
//== Specify on a parent element(e.g., .row) to force immediate children into NN
//== number of columns. Supports wrapping to new lines, but does not do a Masonry
//== style grid.
//== ===================================================================== ==//

@mixin row-cols($count) {
  & > * {
    flex: 0 0 100% / $count;
    max-width: 100% / $count;
  }
}
